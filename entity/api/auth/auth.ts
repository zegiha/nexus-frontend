/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Nexus Core Backend
 * The news viewer service, Nexus API Description
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  EmailVerifyDto,
  EmailVerifyRequestDto,
  SignInDto,
  SignUpDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏöîÏ≤≠
 */
export const authControllerEmailVerifyRequest = (
  emailVerifyRequestDto: BodyType<EmailVerifyRequestDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/auth/email/verify/request`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: emailVerifyRequestDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerEmailVerifyRequestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>,
    TError,
    { data: BodyType<EmailVerifyRequestDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>,
  TError,
  { data: BodyType<EmailVerifyRequestDto> },
  TContext
> => {
  const mutationKey = ["authControllerEmailVerifyRequest"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>,
    { data: BodyType<EmailVerifyRequestDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerEmailVerifyRequest(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerEmailVerifyRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>
>;
export type AuthControllerEmailVerifyRequestMutationBody =
  BodyType<EmailVerifyRequestDto>;
export type AuthControllerEmailVerifyRequestMutationError = ErrorType<unknown>;

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏöîÏ≤≠
 */
export const useAuthControllerEmailVerifyRequest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>,
      TError,
      { data: BodyType<EmailVerifyRequestDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerEmailVerifyRequest>>,
  TError,
  { data: BodyType<EmailVerifyRequestDto> },
  TContext
> => {
  const mutationOptions =
    getAuthControllerEmailVerifyRequestMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù
 */
export const authControllerEmailVerify = (
  emailVerifyDto: BodyType<EmailVerifyDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/auth/email/verify`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: emailVerifyDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerEmailVerifyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerEmailVerify>>,
    TError,
    { data: BodyType<EmailVerifyDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerEmailVerify>>,
  TError,
  { data: BodyType<EmailVerifyDto> },
  TContext
> => {
  const mutationKey = ["authControllerEmailVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerEmailVerify>>,
    { data: BodyType<EmailVerifyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerEmailVerify(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerEmailVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerEmailVerify>>
>;
export type AuthControllerEmailVerifyMutationBody = BodyType<EmailVerifyDto>;
export type AuthControllerEmailVerifyMutationError = ErrorType<unknown>;

/**
 * @summary Ïù¥Î©îÏùº Ïù∏Ï¶ù
 */
export const useAuthControllerEmailVerify = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerEmailVerify>>,
      TError,
      { data: BodyType<EmailVerifyDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerEmailVerify>>,
  TError,
  { data: BodyType<EmailVerifyDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerEmailVerifyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const authControllerSignUp = (
  signUpDto: BodyType<SignUpDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/auth/sign/up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerSignUpMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    TError,
    { data: BodyType<SignUpDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignUp>>,
  TError,
  { data: BodyType<SignUpDto> },
  TContext
> => {
  const mutationKey = ["authControllerSignUp"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignUp>>,
    { data: BodyType<SignUpDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignUp(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignUpMutationBody = BodyType<SignUpDto>;
export type AuthControllerSignUpMutationError = ErrorType<unknown>;

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const useAuthControllerSignUp = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignUp>>,
      TError,
      { data: BodyType<SignUpDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignUp>>,
  TError,
  { data: BodyType<SignUpDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerSignUpMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const authControllerSignIn = (
  signInDto: BodyType<SignInDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    {
      url: `/auth/sign/in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerSignInMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    TError,
    { data: BodyType<SignInDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: BodyType<SignInDto> },
  TContext
> => {
  const mutationKey = ["authControllerSignIn"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerSignIn>>,
    { data: BodyType<SignInDto> }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerSignIn(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerSignInMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignInMutationBody = BodyType<SignInDto>;
export type AuthControllerSignInMutationError = ErrorType<unknown>;

/**
 * @summary Î°úÍ∑∏Ïù∏
 */
export const useAuthControllerSignIn = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerSignIn>>,
      TError,
      { data: BodyType<SignInDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerSignIn>>,
  TError,
  { data: BodyType<SignInDto> },
  TContext
> => {
  const mutationOptions = getAuthControllerSignInMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const authControllerRefresh = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<void>(
    { url: `/auth/refresh`, method: "GET", signal },
    options,
  );
};

export const getAuthControllerRefreshQueryKey = () => {
  return [`/auth/refresh`] as const;
};

export const getAuthControllerRefreshQueryOptions = <
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof authControllerRefresh>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAuthControllerRefreshQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof authControllerRefresh>>
  > = ({ signal }) => authControllerRefresh(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof authControllerRefresh>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type AuthControllerRefreshQueryResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRefresh>>
>;
export type AuthControllerRefreshQueryError = ErrorType<unknown>;

export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof authControllerRefresh>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerRefresh>>,
          TError,
          Awaited<ReturnType<typeof authControllerRefresh>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useAuthControllerRefresh<
  TData = Awaited<ReturnType<typeof authControllerRefresh>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof authControllerRefresh>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAuthControllerRefreshQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
