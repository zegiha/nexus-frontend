/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Nexus Core Backend
 * The news viewer service, Nexus API Description
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { NotificationResponseDto } from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type { ErrorType } from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary ÎÇ¥ ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */
export const notificationControllerGetMyNotifications = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<NotificationResponseDto>(
    { url: `/notification`, method: "GET", signal },
    options,
  );
};

export const getNotificationControllerGetMyNotificationsQueryKey = () => {
  return [`/notification`] as const;
};

export const getNotificationControllerGetMyNotificationsQueryOptions = <
  TData = Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getNotificationControllerGetMyNotificationsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>
  > = ({ signal }) =>
    notificationControllerGetMyNotifications(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type NotificationControllerGetMyNotificationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>
>;
export type NotificationControllerGetMyNotificationsQueryError =
  ErrorType<unknown>;

export function useNotificationControllerGetMyNotifications<
  TData = Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
          TError,
          Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNotificationControllerGetMyNotifications<
  TData = Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
          TError,
          Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useNotificationControllerGetMyNotifications<
  TData = Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÎÇ¥ ÏïåÎ¶º Î™©Î°ù Ï°∞Ìöå
 */

export function useNotificationControllerGetMyNotifications<
  TData = Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof notificationControllerGetMyNotifications>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getNotificationControllerGetMyNotificationsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
 */
export const notificationControllerMarkAsRead = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/notification/${id}`, method: "PATCH" },
    options,
  );
};

export const getNotificationControllerMarkAsReadMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationControllerMarkAsRead>>,
    TError,
    { id: number },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof notificationControllerMarkAsRead>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ["notificationControllerMarkAsRead"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationControllerMarkAsRead>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return notificationControllerMarkAsRead(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type NotificationControllerMarkAsReadMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationControllerMarkAsRead>>
>;

export type NotificationControllerMarkAsReadMutationError = ErrorType<unknown>;

/**
 * @summary ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
 */
export const useNotificationControllerMarkAsRead = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof notificationControllerMarkAsRead>>,
      TError,
      { id: number },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof notificationControllerMarkAsRead>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getNotificationControllerMarkAsReadMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
