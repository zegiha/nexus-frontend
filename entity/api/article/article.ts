/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Nexus Core Backend
 * The news viewer service, Nexus API Description
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ArticleControllerFindArticleByCategoryParams,
  ArticleControllerGetArticlesParams,
  ArticleResponseDto,
  ArticleSummaryResponseDto,
  CreateArticleDto,
  PaginatedArticleResponseSummaryDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * ÏÉàÎ°úÏö¥ Îâ¥Ïä§Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.
 * @summary Îâ¥Ïä§ ÏÉùÏÑ±
 */
export const articleControllerCreateArticle = (
  createArticleDto: BodyType<CreateArticleDto>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ArticleSummaryResponseDto>(
    {
      url: `/article`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createArticleDto,
      signal,
    },
    options,
  );
};

export const getArticleControllerCreateArticleMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof articleControllerCreateArticle>>,
    TError,
    { data: BodyType<CreateArticleDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof articleControllerCreateArticle>>,
  TError,
  { data: BodyType<CreateArticleDto> },
  TContext
> => {
  const mutationKey = ["articleControllerCreateArticle"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof articleControllerCreateArticle>>,
    { data: BodyType<CreateArticleDto> }
  > = (props) => {
    const { data } = props ?? {};

    return articleControllerCreateArticle(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ArticleControllerCreateArticleMutationResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerCreateArticle>>
>;
export type ArticleControllerCreateArticleMutationBody =
  BodyType<CreateArticleDto>;
export type ArticleControllerCreateArticleMutationError = ErrorType<unknown>;

/**
 * @summary Îâ¥Ïä§ ÏÉùÏÑ±
 */
export const useArticleControllerCreateArticle = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof articleControllerCreateArticle>>,
      TError,
      { data: BodyType<CreateArticleDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof articleControllerCreateArticle>>,
  TError,
  { data: BodyType<CreateArticleDto> },
  TContext
> => {
  const mutationOptions =
    getArticleControllerCreateArticleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Îâ¥Ïä§Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Îâ¥Ïä§ Ï°∞Ìöå
 */
export const articleControllerGetArticles = (
  params?: ArticleControllerGetArticlesParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginatedArticleResponseSummaryDto>(
    { url: `/article`, method: "GET", params, signal },
    options,
  );
};

export const getArticleControllerGetArticlesQueryKey = (
  params?: ArticleControllerGetArticlesParams,
) => {
  return [`/article`, ...(params ? [params] : [])] as const;
};

export const getArticleControllerGetArticlesQueryOptions = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = ErrorType<unknown>,
>(
  params?: ArticleControllerGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getArticleControllerGetArticlesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticles>>
  > = ({ signal }) =>
    articleControllerGetArticles(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articleControllerGetArticles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ArticleControllerGetArticlesQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticles>>
>;
export type ArticleControllerGetArticlesQueryError = ErrorType<unknown>;

export function useArticleControllerGetArticles<
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | ArticleControllerGetArticlesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetArticles>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetArticles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetArticles<
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = ErrorType<unknown>,
>(
  params?: ArticleControllerGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetArticles>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetArticles>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetArticles<
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = ErrorType<unknown>,
>(
  params?: ArticleControllerGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Îâ¥Ïä§ Ï°∞Ìöå
 */

export function useArticleControllerGetArticles<
  TData = Awaited<ReturnType<typeof articleControllerGetArticles>>,
  TError = ErrorType<unknown>,
>(
  params?: ArticleControllerGetArticlesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticles>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleControllerGetArticlesQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏãúÏä§ÌÖúÏóê Îì±Î°ùÎêú Î™®Îì† Îâ¥Ïä§ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Îì±Î°ùÎêú Î™®Îì† Ïπ¥ÌÖåÍ≥†Î¶¨ Ï°∞Ìöå
 */
export const articleControllerGetCategories = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string[]>(
    { url: `/article/categories`, method: "GET", signal },
    options,
  );
};

export const getArticleControllerGetCategoriesQueryKey = () => {
  return [`/article/categories`] as const;
};

export const getArticleControllerGetCategoriesQueryOptions = <
  TData = Awaited<ReturnType<typeof articleControllerGetCategories>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof articleControllerGetCategories>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getArticleControllerGetCategoriesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetCategories>>
  > = ({ signal }) => articleControllerGetCategories(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof articleControllerGetCategories>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ArticleControllerGetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetCategories>>
>;
export type ArticleControllerGetCategoriesQueryError = ErrorType<unknown>;

export function useArticleControllerGetCategories<
  TData = Awaited<ReturnType<typeof articleControllerGetCategories>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetCategories>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetCategories<
  TData = Awaited<ReturnType<typeof articleControllerGetCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetCategories>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetCategories>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetCategories>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetCategories<
  TData = Awaited<ReturnType<typeof articleControllerGetCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Îì±Î°ùÎêú Î™®Îì† Ïπ¥ÌÖåÍ≥†Î¶¨ Ï°∞Ìöå
 */

export function useArticleControllerGetCategories<
  TData = Awaited<ReturnType<typeof articleControllerGetCategories>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetCategories>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleControllerGetCategoriesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌäπÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Îâ¥Ïä§Î•º ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖòÍ≥º Ìï®Íªò Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏßÄÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Ïù∏ Îâ¥Ïä§ Ï°∞Ìöå
 */
export const articleControllerFindArticleByCategory = (
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginatedArticleResponseSummaryDto>(
    { url: `/article/category/${category}`, method: "GET", params, signal },
    options,
  );
};

export const getArticleControllerFindArticleByCategoryQueryKey = (
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
) => {
  return [
    `/article/category/${category}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getArticleControllerFindArticleByCategoryQueryOptions = <
  TData = Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getArticleControllerFindArticleByCategoryQueryKey(category, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>
  > = ({ signal }) =>
    articleControllerFindArticleByCategory(
      category,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!category,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ArticleControllerFindArticleByCategoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>
>;
export type ArticleControllerFindArticleByCategoryQueryError =
  ErrorType<unknown>;

export function useArticleControllerFindArticleByCategory<
  TData = Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: string,
  params: undefined | ArticleControllerFindArticleByCategoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
          TError,
          Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerFindArticleByCategory<
  TData = Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
          TError,
          Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerFindArticleByCategory<
  TData = Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏßÄÏ†ï Ïπ¥ÌÖåÍ≥†Î¶¨Ïù∏ Îâ¥Ïä§ Ï°∞Ìöå
 */

export function useArticleControllerFindArticleByCategory<
  TData = Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: string,
  params?: ArticleControllerFindArticleByCategoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerFindArticleByCategory>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleControllerFindArticleByCategoryQueryOptions(
    category,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏïÑÏù¥ÎîîÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÏÉÅÏÑ∏ Îâ¥Ïä§Î•º Ï°∞ÌöåÌï©ÎãàÎã§
 * @summary Îâ¥Ïä§ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const articleControllerGetArticle = (
  uuid: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ArticleResponseDto>(
    { url: `/article/${uuid}`, method: "GET", signal },
    options,
  );
};

export const getArticleControllerGetArticleQueryKey = (uuid: string) => {
  return [`/article/${uuid}`] as const;
};

export const getArticleControllerGetArticleQueryOptions = <
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticle>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getArticleControllerGetArticleQueryKey(uuid);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof articleControllerGetArticle>>
  > = ({ signal }) => articleControllerGetArticle(uuid, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!uuid,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof articleControllerGetArticle>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ArticleControllerGetArticleQueryResult = NonNullable<
  Awaited<ReturnType<typeof articleControllerGetArticle>>
>;
export type ArticleControllerGetArticleQueryError = ErrorType<unknown>;

export function useArticleControllerGetArticle<
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetArticle>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetArticle>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetArticle<
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof articleControllerGetArticle>>,
          TError,
          Awaited<ReturnType<typeof articleControllerGetArticle>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useArticleControllerGetArticle<
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticle>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Îâ¥Ïä§ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useArticleControllerGetArticle<
  TData = Awaited<ReturnType<typeof articleControllerGetArticle>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof articleControllerGetArticle>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getArticleControllerGetArticleQueryOptions(
    uuid,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
