/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Nexus Core Backend
 * The news viewer service, Nexus API Description
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ChangeEmailDto,
  ChangePasswordDto,
  SubscribeCompanyDto,
  SubscribedCompaniesResponseDto,
} from "../../const";

import { customInstance } from "../../../shared/axios/lib/customInstance";
import type {
  ErrorType,
  BodyType,
} from "../../../shared/axios/lib/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Ïù¥Î©îÏùº Ï°∞Ìöå
 */
export const userControllerMyEmail = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<string>(
    { url: `/user/my/email`, method: "GET", signal },
    options,
  );
};

export const getUserControllerMyEmailQueryKey = () => {
  return [`/user/my/email`] as const;
};

export const getUserControllerMyEmailQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerMyEmail>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerMyEmail>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUserControllerMyEmailQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerMyEmail>>
  > = ({ signal }) => userControllerMyEmail(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerMyEmail>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerMyEmailQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerMyEmail>>
>;
export type UserControllerMyEmailQueryError = ErrorType<unknown>;

export function useUserControllerMyEmail<
  TData = Awaited<ReturnType<typeof userControllerMyEmail>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerMyEmail>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerMyEmail>>,
          TError,
          Awaited<ReturnType<typeof userControllerMyEmail>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerMyEmail<
  TData = Awaited<ReturnType<typeof userControllerMyEmail>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerMyEmail>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerMyEmail>>,
          TError,
          Awaited<ReturnType<typeof userControllerMyEmail>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerMyEmail<
  TData = Awaited<ReturnType<typeof userControllerMyEmail>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerMyEmail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïù¥Î©îÏùº Ï°∞Ìöå
 */

export function useUserControllerMyEmail<
  TData = Awaited<ReturnType<typeof userControllerMyEmail>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerMyEmail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getUserControllerMyEmailQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïù¥Î©îÏùº Î≥ÄÍ≤Ω
 */
export const userControllerChangeEmail = (
  changeEmailDto: BodyType<ChangeEmailDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ChangeEmailDto>(
    {
      url: `/user/change/email`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: changeEmailDto,
    },
    options,
  );
};

export const getUserControllerChangeEmailMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerChangeEmail>>,
    TError,
    { data: BodyType<ChangeEmailDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerChangeEmail>>,
  TError,
  { data: BodyType<ChangeEmailDto> },
  TContext
> => {
  const mutationKey = ["userControllerChangeEmail"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerChangeEmail>>,
    { data: BodyType<ChangeEmailDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerChangeEmail(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerChangeEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerChangeEmail>>
>;
export type UserControllerChangeEmailMutationBody = BodyType<ChangeEmailDto>;
export type UserControllerChangeEmailMutationError = ErrorType<unknown>;

/**
 * @summary Ïù¥Î©îÏùº Î≥ÄÍ≤Ω
 */
export const useUserControllerChangeEmail = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerChangeEmail>>,
      TError,
      { data: BodyType<ChangeEmailDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerChangeEmail>>,
  TError,
  { data: BodyType<ChangeEmailDto> },
  TContext
> => {
  const mutationOptions = getUserControllerChangeEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
 */
export const userControllerChangePassword = (
  changePasswordDto: BodyType<ChangePasswordDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ChangePasswordDto>(
    {
      url: `/user/change/password`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: changePasswordDto,
    },
    options,
  );
};

export const getUserControllerChangePasswordMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerChangePassword>>,
    TError,
    { data: BodyType<ChangePasswordDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerChangePassword>>,
  TError,
  { data: BodyType<ChangePasswordDto> },
  TContext
> => {
  const mutationKey = ["userControllerChangePassword"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerChangePassword>>,
    { data: BodyType<ChangePasswordDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerChangePassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerChangePassword>>
>;
export type UserControllerChangePasswordMutationBody =
  BodyType<ChangePasswordDto>;
export type UserControllerChangePasswordMutationError = ErrorType<unknown>;

/**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
 */
export const useUserControllerChangePassword = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerChangePassword>>,
      TError,
      { data: BodyType<ChangePasswordDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerChangePassword>>,
  TError,
  { data: BodyType<ChangePasswordDto> },
  TContext
> => {
  const mutationOptions =
    getUserControllerChangePasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Íµ¨ÎèÖ
 */
export const userControllerSubscribe = (
  subscribeCompanyDto: BodyType<SubscribeCompanyDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<SubscribeCompanyDto>(
    {
      url: `/user/subscribe`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: subscribeCompanyDto,
    },
    options,
  );
};

export const getUserControllerSubscribeMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerSubscribe>>,
    TError,
    { data: BodyType<SubscribeCompanyDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerSubscribe>>,
  TError,
  { data: BodyType<SubscribeCompanyDto> },
  TContext
> => {
  const mutationKey = ["userControllerSubscribe"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerSubscribe>>,
    { data: BodyType<SubscribeCompanyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerSubscribe(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerSubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerSubscribe>>
>;
export type UserControllerSubscribeMutationBody = BodyType<SubscribeCompanyDto>;
export type UserControllerSubscribeMutationError = ErrorType<unknown>;

/**
 * @summary Íµ¨ÎèÖ
 */
export const useUserControllerSubscribe = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerSubscribe>>,
      TError,
      { data: BodyType<SubscribeCompanyDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerSubscribe>>,
  TError,
  { data: BodyType<SubscribeCompanyDto> },
  TContext
> => {
  const mutationOptions = getUserControllerSubscribeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Íµ¨ÎèÖ Ìï¥Ï†ú
 */
export const userControllerUnsubscribeCompany = (
  subscribeCompanyDto: BodyType<SubscribeCompanyDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<SubscribeCompanyDto>(
    {
      url: `/user/unsubscribe`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: subscribeCompanyDto,
    },
    options,
  );
};

export const getUserControllerUnsubscribeCompanyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>,
    TError,
    { data: BodyType<SubscribeCompanyDto> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>,
  TError,
  { data: BodyType<SubscribeCompanyDto> },
  TContext
> => {
  const mutationKey = ["userControllerUnsubscribeCompany"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>,
    { data: BodyType<SubscribeCompanyDto> }
  > = (props) => {
    const { data } = props ?? {};

    return userControllerUnsubscribeCompany(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerUnsubscribeCompanyMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>
>;
export type UserControllerUnsubscribeCompanyMutationBody =
  BodyType<SubscribeCompanyDto>;
export type UserControllerUnsubscribeCompanyMutationError = ErrorType<unknown>;

/**
 * @summary Íµ¨ÎèÖ Ìï¥Ï†ú
 */
export const useUserControllerUnsubscribeCompany = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>,
      TError,
      { data: BodyType<SubscribeCompanyDto> },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerUnsubscribeCompany>>,
  TError,
  { data: BodyType<SubscribeCompanyDto> },
  TContext
> => {
  const mutationOptions =
    getUserControllerUnsubscribeCompanyMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Í≥ÑÏ†ï ÏÇ≠Ï†ú
 */
export const userControllerDeleteAccount = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<string>(
    { url: `/user/delete`, method: "DELETE" },
    options,
  );
};

export const getUserControllerDeleteAccountMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userControllerDeleteAccount>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof userControllerDeleteAccount>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["userControllerDeleteAccount"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userControllerDeleteAccount>>,
    void
  > = () => {
    return userControllerDeleteAccount(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UserControllerDeleteAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof userControllerDeleteAccount>>
>;

export type UserControllerDeleteAccountMutationError = ErrorType<unknown>;

/**
 * @summary Í≥ÑÏ†ï ÏÇ≠Ï†ú
 */
export const useUserControllerDeleteAccount = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof userControllerDeleteAccount>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof userControllerDeleteAccount>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getUserControllerDeleteAccountMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Íµ¨ÎèÖÌïú Ïñ∏Î°†ÏÇ¨ Î™©Î°ù Ï°∞Ìöå
 */
export const userControllerGetSubscribedCompanies = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SubscribedCompaniesResponseDto>(
    { url: `/user/subscribe/list`, method: "GET", signal },
    options,
  );
};

export const getUserControllerGetSubscribedCompaniesQueryKey = () => {
  return [`/user/subscribe/list`] as const;
};

export const getUserControllerGetSubscribedCompaniesQueryOptions = <
  TData = Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserControllerGetSubscribedCompaniesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>
  > = ({ signal }) =>
    userControllerGetSubscribedCompanies(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type UserControllerGetSubscribedCompaniesQueryResult = NonNullable<
  Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>
>;
export type UserControllerGetSubscribedCompaniesQueryError = ErrorType<unknown>;

export function useUserControllerGetSubscribedCompanies<
  TData = Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetSubscribedCompanies<
  TData = Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
          TError,
          Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useUserControllerGetSubscribedCompanies<
  TData = Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Íµ¨ÎèÖÌïú Ïñ∏Î°†ÏÇ¨ Î™©Î°ù Ï°∞Ìöå
 */

export function useUserControllerGetSubscribedCompanies<
  TData = Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof userControllerGetSubscribedCompanies>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getUserControllerGetSubscribedCompaniesQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
